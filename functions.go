package main

import (
	"errors"
	"net/http"
	"time"
)

// function designed to create, initialize and return an
// Exploiter object that can be used to test/exploit a target.
func NewExploiter(options ...ExploiterOptionsFunc) (exploiter *Exploiter, err error) {
	var fn ExploiterOptionsFunc
	var configOptions ExploiterOptions = ExploiterOptions{}
	var timeout time.Duration = DEFAULT_TIMEOUT.Abs()

	exploiter = new(Exploiter)

	for _, fn = range options {
		err = fn(&configOptions)
		if err != nil {
			return nil, err
		}
	}

	// the user has not passed in a client to use, so
	// use the http.DefaultClient and set the timeout.
	if configOptions.Client == nil {
		configOptions.Client = http.DefaultClient
		configOptions.Client.Timeout = timeout
	}

	if len(configOptions.BaseUrl) < 1 {
		return nil, errors.New("must specify a base url for the target.")
	}

	exploiter.baseurl = configOptions.BaseUrl
	exploiter.client = configOptions.Client

	return exploiter, nil
}

// options function designed to allow the user to set the
// base url to use.
func WithBaseurl(baseurl string) ExploiterOptionsFunc {
	return func(eo *ExploiterOptions) error {
		// if the baseurl is already set, throw an error
		// and let the user know only one baseurl can be
		// tested at a time.
		if len(eo.BaseUrl) > 0 {
			return errors.New("can only specify one baseurl for the Exploiter.")
		}
		eo.BaseUrl = baseurl
		return nil
	}
}

// options function designed to allow the user to set the
// http client to use when making requests to the target.
func WithClient(client *http.Client) ExploiterOptionsFunc {
	return func(eo *ExploiterOptions) error {
		// if the client passed in is nil, an error will
		// be thrown.
		if client == nil {
			return errors.New("client begin set cannot be nil.")
		}

		// if the user attempts to set the Exploiter with
		// multiple HTTP clients, an error will be thrown.
		if eo.Client != nil {
			return errors.New("can only specify one http client for the Exploiter.")
		}

		eo.Client = client
		return nil
	}
}

// options function designed to allow the user to set the
// timeout to use when using the default client. this will
// have no effect if combined with the WithClient function.
func WithTimeout(timeout time.Duration) ExploiterOptionsFunc {
	return func(eo *ExploiterOptions) error {
		if timeout < 0 {
			return errors.New("timeout value must be >= 0.")
		}

		eo.Timeout = timeout
		return nil
	}
}
